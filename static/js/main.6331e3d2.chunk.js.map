{"version":3,"sources":["components/Twinkle.js","assets/smoke.png","components/Nebula.js","components/Stars.js","App.js","components/Home.js","index.js"],"names":["Twinkle","scene","useThree","starArray","starGeo","THREE","starMaterial","color","i","star","rotation","material","position","set","Math","random","transparent","opacity","x","y","PI","z","push","add","loadStars","useFrame","forEach","p","Nebula","loader","cloudParticles","console","log","load","smoke","texture","cloudGeo","cloudMaterial","map","cloud","polygonOffset","polygonOffsetFactor","depthWrite","orangeLight","redLight","blueLight","fourLight","fiveLight","extend","OrbitControls","ScrollCamera","finalPosition","camera","speed","initialPosition","window","addEventListener","e","scrollDistance","document","body","getBoundingClientRect","top","raf","requestAnimationFrame","MouseCamera","positionX","initialX","finalX","inertiaX","positionY","initialY","finalY","inertiaY","clientX","clientY","SkyBox","background","Stars","colorManagement","fov","App","id","fallback","Home","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6331e3d2.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport {useFrame, useThree} from '@react-three/fiber';\n\nconst Twinkle = () => {\n    const {scene} = useThree();\n    \n    // Array stores all stars for reference in animation frame\n    let starArray = [];\n\n    // Loads star object into the scene\n    const loadStars = () => {\n        const starGeo = new THREE.SphereBufferGeometry(0.15, 5, 5);\n        const starMaterial = new THREE.MeshBasicMaterial({color: 0xffffff})\n        \n        for (let i= 0; i < 300; i++) {\n            const star = new THREE.Mesh(starGeo, starMaterial);\n            const {rotation, material} = star;\n\n            star.position.set(\n                Math.random() * 200 - 150,\n                Math.random() * 300 - 150,\n                Math.random() * 500 - 250,\n            );\n\n            material.transparent = true\n            material.opacity = Math.random() * 1\n\n            rotation.x = 1.16\n            rotation.y = (Math.PI / 180) * 90\n            rotation.z = Math.random() * 2 * Math.PI\n\n            starArray.push(star);\n            scene.add(star);\n        };\n    };  \n\n    loadStars();\n\n    // Twinkle animation \n    useFrame(() => {\n        starArray.forEach(p => {\n            const number = Math.random() * 1\n\n            if (number < 0.01) {\n                if (p.material.opacity > 0.99) {\n                    p.material.opacity = 0.4\n                } else {\n                    p.material.opacity += 0.0025\n                }\n            };\n        });\n    })\n\n    return null;\n}\n\nexport default Twinkle;\n","export default __webpack_public_path__ + \"static/media/smoke.7c256a05.png\";","import {useFrame, useThree} from '@react-three/fiber';\nimport * as THREE from 'three';\nimport smoke from '../assets/smoke.png';\n\nconst Nebula = () => {\n    const loader = new THREE.TextureLoader();\n    const {scene} = useThree();\n    \n    // Array contains all clouds for later reference\n    let cloudParticles = [];\n    console.log('Nebula loaded')\n\n    loader.load(smoke, function(texture) {\n        const cloudGeo = new THREE.PlaneBufferGeometry(200, 200);\n        const cloudMaterial = new THREE.MeshLambertMaterial({\n            transparent: true,\n            map: texture,\n        });\n\n        for (let i= 0; i < 50; i++) {\n            const cloud = new THREE.Mesh(cloudGeo, cloudMaterial);\n            const {rotation, material} = cloud;\n\n            cloud.position.set(\n              -250 + (i * 0.5), \n              Math.random() * 260 - 150, // 200 ~ 350\n              Math.random() * 700 - 380, // -300 ~ 400\n            );\n\n            rotation.x = 1.16;\n            rotation.y = (Math.PI / 180) * 90\n            rotation.z = Math.random() * 2 * Math.PI;\n\n            material.polygonOffset= true\n            material.polygonOffsetFactor= -4\n            // material.depthTest = false\n            material.depthWrite = false\n            // material.alphaTest = 0.5\n            material.opacity = 0.7\n\n            cloudParticles.push(cloud);\n            scene.add(cloud);\n        };\n    });  \n\n    // Animation for cloud rotation\n    useFrame(() => cloudParticles.forEach(p => p.rotation.z -= 0.0016))\n\n    // Lighting for nebula clouds\n    const orangeLight = new THREE.PointLight(0x2334a9, 5, 100, 1.7);\n    orangeLight.position.set( -210, 20, 250);\n    scene.add(orangeLight);\n\n    const redLight = new THREE.PointLight(0x36336a, 10, 120, 1.7);\n    redLight.position.set( -210, 30, -180);\n    scene.add(redLight);\n\n    const blueLight = new THREE.PointLight(0x1a2e69, 5, 120, 1.7);\n    blueLight.position.set( -210, -20, 50);\n    scene.add(blueLight);\n\n    const fourLight = new THREE.PointLight(0x353267, 5, 100, 1.7);\n    fourLight.position.set( -210, 80, 350);\n    scene.add(fourLight);\n\n    const fiveLight = new THREE.PointLight(0x353267, 5, 70, 1.7);\n    fiveLight.position.set( -210, 100, -120);\n    scene.add(fiveLight);\n\n    return null;\n}\n\nexport default Nebula;","import React, {useMemo, useRef} from 'react';\nimport circleImage from '../assets/circle.png';\nimport {Canvas, extend, useFrame, useLoader, useThree} from '@react-three/fiber';\nimport * as THREE from 'three';\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\nimport Twinkle from './Twinkle.js'\nimport Nebula from './Nebula.js';\n\nextend({OrbitControls});\n\n// Renders non-animated star objects in the scene\nconst Points = () => {\n    const imgTexture = useLoader(THREE.TextureLoader, circleImage);\n\tconst count = 800\n    \n\tconst positions = useMemo(() => {\n        let positions = []\n        \n        // Position values are randomized \n        for (let i = 0; i < count; i++) {\n            const x = Math.random() * 200 - 150;\n            const y = Math.random() * 320 - 160;\n            const z = Math.random() * 500 - 250;\n            positions.push(x, y, z)\n        }\n\t\treturn new Float32Array(positions);\n\t}, [count]);\n        \n        return (\n            <points>\n\t\t\t<bufferGeometry attach='geometry'>\n\t\t\t\t<bufferAttribute \n\t\t\t\t\tattachObject={['attributes', 'position']}\n\t\t\t\t\tarray={positions}\n\t\t\t\t\tcount={positions.length / 3}\n\t\t\t\t\titemSize={3}\n\t\t\t\t/>\n\t\t\t</bufferGeometry>\n\t\t\t<pointsMaterial\n\t\t\t\tattach='material'\n\t\t\t\tmap={imgTexture}\n\t\t\t\tcolor={0xFFFFFF}\n\t\t\t\tsize={0.6}\n\t\t\t\ttransparent={false}\n\t\t\t\talphaTest={0.5}\n\t\t\t\topacity={1.0}\n\t\t\t/>\n\t\t</points>\n    );\n}\n\nconst CameraControls = () => {\n    const {camera, gl: {domElement},} = useThree()\n    const controls = useRef();\n\n    useFrame(() => controls.current.update());\n\n    return (\n        <orbitControls\n            ref={controls}\n            args={[camera, domElement]}\n            autoRotate={false}\n            enableZoom={false}\n        />\n    );\n}\n\nconst ScrollCamera = () => {\n    const {camera} = useThree()\n    \n    let speed = 0\n    let position = 0\n    let initialPosition = 0\n    let finalPosition \n    let deltaPosition\n    \n    window.addEventListener('scroll', (e) => {\n        const scrollDistance = document.body.getBoundingClientRect().top;\n\n        finalPosition = scrollDistance\n\n        // Returns how many pixels were scrolled\n        deltaPosition = (finalPosition - initialPosition)\n\n        // Speed is used for 'inertia' effect when scrolling\n        speed += (deltaPosition * 0.0005)\n        \n        if (initialPosition !== finalPosition) {\n            initialPosition = scrollDistance\n        }\n    })\n\n    const raf = () => {\n        position += speed\n        speed *= 0.954321\n        camera.position.y = position\n        window.requestAnimationFrame(raf)\n    }\n    \n    raf();\n\n    return null;\n}\n\n// Parallax scrolling effect\nconst MouseCamera = () => {\n    const {camera} = useThree()\n\n    let positionX = 0\n    let initialX = 0\n    let finalX = 0\n    let deltaX = 0\n    let inertiaX = 0\n\n    let positionY = 0\n    let initialY = 0\n    let finalY = 0\n    let deltaY = 0\n    let inertiaY = 0\n\n    document.addEventListener('mousemove', (e) => {\n        // Controls side-to-side movement\n        finalX = e.clientX\n        deltaX = (finalX - initialX)\n        inertiaX += deltaX * 0.0002\n\n        if (initialX !== finalX) {\n            initialX = e.clientX;\n        }\n        \n        // Controls inward-outward movement\n        finalY = e.clientY\n        deltaY = (finalY - initialY)\n        inertiaY += deltaY * 0.00025\n\n        if (initialY !== finalY) {\n            initialY = e.clientY\n        }\n    })\n    \n    const raf = () => {\n        positionX += inertiaX\n        inertiaX *= 0.954321\n        camera.position.z = positionX \n        \n        positionY += inertiaY\n        inertiaY *= 0.954321\n        camera.position.x = positionY + 90\n\n        window.requestAnimationFrame(raf)\n    }\n\n    raf();\n\n    return null;\n}\n\n// Adds a dark blue-black background color\nconst SkyBox = () => {\n    const {scene} = useThree();\n    scene.background = new THREE.Color('#0c0f18')\n    \n    return null;\n}\n\nconst Stars = () => {\n    return (\n      <Canvas\n          colorManagement={true}\n          camera={{position: [100, 10, 0], fov: 75}}\n      >\n          <Nebula />\n          {/* <Points /> */}\n          <SkyBox />\n          <Twinkle />\n          <Twinkle />\n          <Twinkle />\n          <Twinkle />\n          {/* <CameraControls /> */}\n          <ScrollCamera />\n          <MouseCamera />\n      </Canvas>\n    )\n  }\n\nexport default Stars;\n","import React, {Suspense, useMemo} from 'react';\nimport ReactDOM from 'react-dom';\nimport Stars from './components/Stars.js';\n\nconst App = () => {\n  return (\n\t\t<div id=\"canvas-container\">\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<Stars/>\n\t\t\t</Suspense>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n","import React from 'react';\nimport '../styles/css/home.css'\n\nconst Home = () => {\n    return (\n        <div id='body'>\n            <div id=\"intro-wrapper\">\n                <div id=\"intro-container\">\n                    <div id=\"intro-h1\">STEPHEN TRIEU</div>\n                    <div id=\"intro-p\"> WEB DEVELOPER | DESIGNER</ div>\n                    <div id=\"intro-button-container\">\n                        <div id=\"intro-button-work\">WORK</div>\n                        <div id=\"intro-button-about\">ABOUT</div> \n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/css/main.css'\nimport Home from './components/Home.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}